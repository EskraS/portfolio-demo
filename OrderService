using Data;
using Domain;
using Microsoft.EntityFrameworkCore;

namespace Services
{
    public class OrderService
    {
        private readonly AppDbContext _context;

        public OrderService(AppDbContext context)
        {
            _context = context;
        }

        public async Task<List<Order>> GetAllOrdersAsync()
        {
            return await _context.Orders.Include(o => o.Customer).ToListAsync();
        }

        public async Task<Order?> GetOrderByIdAsync(int id)
        {
            return await _context.Orders.Include(o => o.Customer).FirstOrDefaultAsync(o => o.Id == id);
        }

        public async Task AddOrderAsync(Order order)
        {
            _context.Orders.Add(order);
            await _context.SaveChangesAsync();
        }

        public async Task UpdateOrderAsync(Order order)
        {
            _context.Orders.Update(order);
            await _context.SaveChangesAsync();
        }

        public async Task DeleteOrderAsync(int id)
        {
            var order = await _context.Orders.FindAsync(id);
            if (order != null)
            {
                _context.Orders.Remove(order);
                await _context.SaveChangesAsync();
            }
        }

        public async Task<List<Order>> GetOrdersByCustomerAsync(int customerId)
        {
            return await _context.Orders.Where(o => o.CustomerId == customerId).ToListAsync();
        }

        public async Task<decimal> GetTotalPriceByCustomerAsync(int customerId)
        {
            return await _context.Orders.Where(o => o.CustomerId == customerId).SumAsync(o => o.Price);
        }

        public async Task<Dictionary<int, decimal>> GetTotalPricePerCustomerAsync()
        {
            return await _context.Orders
                .GroupBy(o => o.CustomerId)
                .ToDictionaryAsync(g => g.Key, g => g.Sum(o => o.Price));
        }
    }
}
