// Main application controller
import apiService from './api.js';
import storageService from './storage.js';
import uiManager from './ui.js';
import utils from './utils.js';

class CarApp {
    constructor() {
        this.currentUser = null;
        this.cars = [];
        this.isInitialized = false;
    }

    // Initialize the application
    async init() {
        try {
            // Add event listeners
            this.setupEventListeners();

            // Check authentication status
            await this.checkAuthStatus();

            this.isInitialized = true;
        } catch (error) {
            console.error('App initialization error:', error);
            uiManager.showToast('Failed to initialize application', 'error');
        }
    }

    // Setup all event listeners
    setupEventListeners() {
        uiManager.addEventListeners({
            onLogin: this.handleLogin.bind(this),
            onRegister: this.handleRegister.bind(this),
            onLogout: this.handleLogout.bind(this),
            onAddCar: this.handleAddCar.bind(this),
            onDeleteCar: this.handleDeleteCar.bind(this)
        });
    }

    // Check authentication status on app start
    async checkAuthStatus() {
        // Add a small delay to show the loading animation
        await new Promise(resolve => setTimeout(resolve, 1000));

        const authToken = storageService.getAuthToken();

        if (authToken) {
            try {
                const userData = await apiService.getProfile();
                this.currentUser = userData;
                this.showDashboard();
                await this.loadCars();
            } catch (error) {
                // Token is invalid, clear it and show login
                storageService.clearSession();
                apiService.clearAuthToken();
                this.showAuthForms();
            }
        } else {
            this.showAuthForms();
        }
    }

    // Handle user login
    async handleLogin(e) {
        e.preventDefault();

        try {
            const email = document.getElementById('loginEmail').value;
            const password = document.getElementById('loginPassword').value;

            if (!utils.validateEmail(email)) {
                uiManager.showToast('Please enter a valid email address', 'error');
                return;
            }

            if (!utils.validatePassword(password)) {
                uiManager.showToast('Password should be at least 6 symbols long', 'error');
                return;
            }

            uiManager.showLoading();

            const data = await apiService.login({ email, password });

            this.currentUser = data.user;
            storageService.setUserData(data.user)
            storageService.setAuthToken(data.token)

            this.showDashboard();
            await this.loadCars();

        } catch (error) {
            uiManager.showToast(error.message, 'error')
        } finally {
            uiManager.hideLoading();
        }

    }

    // Handle user registration

    async handleRegister(e) {
        try {
            e.preventDefault();

            const username = document.getElementById('registerUsername').value;
            const email = document.getElementById('registerEmail').value;
            const password = document.getElementById('registerPassword').value;

            if (!utils.validateEmail(email)) {
                return uiManager.showToast('Please enter a valid email', 'error');
            }

            if (!utils.validatePassword(password)) {
                return uiManager.showToast('Password should be at least 6 characters long', 'error');
            }

            uiManager.showLoading();
            const data = await apiService.register({ username, email, password });

            this.currentUser = data.user;
            storageService.setUserData(data.user);
            storageService.setAuthToken(data.token);

            this.showDashboard();
            await this.loadCars();

        } catch (error) {
            uiManager.showToast('There was an error while trying to register')
        } finally {
            uiManager.hideLoading();
        }
    }

    // Handle user logout
    handleLogout() {
        this.currentUser = null;
        this.cars = [];
        storageService.clearSession();
        apiService.clearAuthToken();

        uiManager.showToast('Logged out successfully');
        this.showAuthForms();
    }

    // Handle adding a new car
    async handleAddCar(e) {
        e.preventDefault();

        const carData = uiManager.getCarFormData();

        // Validate required fields
        if (!carData.brand || !carData.model || !carData.year || !carData.price) {
            uiManager.showToast('Please fill in all required fields', 'error');
            return;
        }

        try {
            uiManager.showLoading();
            await apiService.createCar(carData);

            uiManager.showToast('Car added successfully');
            uiManager.hideAddCarModal();
            await this.loadCars();
        } catch (error) {
            uiManager.showToast(error.message, 'error');
        } finally {
            uiManager.hideLoading();
        }
    }

    // Handle deleting a car
    async handleDeleteCar(carId) {
        try {
            uiManager.showLoading();
            await apiService.deleteCar(carId);
            await this.loadCars();

            uiManager.showToast('Car deleted successfully');

        } catch (error) {
            uiManager.showToast('You are not authorized to delete this car', 'error')
        }
    }

    // Load cars from API
    async loadCars() {
        try {
            uiManager.showLoading();
            const data = await apiService.getCars();
            this.cars = data.cars;

            uiManager.renderCars(this.cars)

            uiManager.showToast('Cars loaded')


        } catch (error) {
            uiManager.showToast('Failed to load cars', 'error');
        } finally {
            uiManager.hideLoading();
        }
    }

    // Show authentication forms
    showAuthForms() {
        uiManager.showAuthForms();
    }

    // Show dashboard
    showDashboard() {
        uiManager.showDashboard();

        if (this.currentUser) {
            uiManager.updateUserName(this.currentUser.username);
        }
    }

    // Get current user
    getCurrentUser() {
        return this.currentUser;
    }

    // Get cars
    getCars() {
        return this.cars;
    }

    // Check if user is authenticated
    isAuthenticated() {
        return !!this.currentUser;
    }

    // Get app status
    getStatus() {
        return {
            isInitialized: this.isInitialized,
            isAuthenticated: this.isAuthenticated(),
            currentUser: this.currentUser,
            carsCount: this.cars.length,
            currentView: uiManager.getCurrentView()
        };
    }
}

// Create and export app instance
const app = new CarApp();

// Initialize app when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    app.init();
});

export default app; 
